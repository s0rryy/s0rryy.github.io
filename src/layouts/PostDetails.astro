---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import { SITE } from "@config";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
};
---

<Layout {...layoutProps}>
  <Header />

  <!-- <div class="progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill">
    <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div>
  </div> -->

  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
    >
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>Go back</span>
    </button>
  </div>
  <main id="main-content">
    <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
    <Datetime
      pubDatetime={pubDatetime}
      modDatetime={modDatetime}
      size="lg"
      className="my-2"
    />
    <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
      <Content />
    </article>

    <ul class="my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} />)}
    </ul>

    <div
      class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
    >
      <button
        id="back-to-top"
        class="focus-outline whitespace-nowrap py-1 hover:opacity-75"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
          <path
            d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
          ></path>
        </svg>
        <span>Back to Top</span>
      </button>

      <ShareLinks />
    </div>
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
</style>

<script is:inline>
  /** Create a progress indicator
   *  at the top
   *  进度调显示  */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls
   *  下滑条*/
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily
   *  添加链接，使得用户可以方便地分享各个部分*/
  function addHeadingLinks() {
    // let headings = Array.from(document.querySelectorAll("h1, h2, h3, h4, h5, h6"));
    // for (let heading of headings) {
    //   heading.classList.add("group");
    //   let link = document.createElement("a");
    //   link.innerText = "#";
    //   link.className = "heading-link hidden group-hover:inline-block ml-2";
    //   link.href = "#" + heading.id;
    //   link.ariaHidden = "true";
    //   heading.appendChild(link);
    // }
    let headings = Array.from(
      document.querySelectorAll("h1, h2, h3, h4, h5, h6")
    );
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");

      // Determine the number of "#" based on the heading level
      let level = parseInt(heading.tagName.slice(1));
      link.innerText = "#".repeat(level);

      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#".repeat(level) + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();
  
  function createSidebar() {
    // 检查设备宽度，如果小于1424px则不生成侧边栏
    if (window.innerWidth < 1424) {
      // console.log("手机设备，不生成侧边栏");
      return;
    }else{
      // 创建一个 div 元素，用于作为侧边栏的容器，并存储在变量 sidebar 中
      const sidebar = document.createElement("div");
      // 为 sidebar 设置 CSS 类名，包含了固定位置、外边距、内边距、背景色等
      sidebar.className = 
        "shadow-lg rounded-lg fixed right-0 top-20 my-4 py-2 px-2 bg-white overflow-auto";
      // 设置 sidebar 的最大高度，并允许垂直滚动
      sidebar.style.maxHeight = "70vh"; // 高度限制为 70% 的视口高度
      sidebar.style.overflowY = "auto"; // 超出部分允许垂直滚动
      // 获取所有的标题元素（h1, h2, h3, h4）
      let headings = Array.from(document.querySelectorAll("h1, h2, h3, h4"));
      // 为每个标题创建一个链接并添加到侧边栏
      for (let heading of headings) {
        let link = document.createElement("a");
        // 根据标题级别设置缩进
        let level = parseInt(heading.tagName.slice(1));
        link.style.paddingLeft = level * 20 + "px";
        // 设置链接的文字内容为标题文本
        link.innerText = heading.innerText;
        // 如果标题有 id，则设置为链接的 href
        if (heading.id != "") {
          link.href = "#" + heading.id;
        }
        // 将链接和换行符添加到侧边栏
        sidebar.appendChild(link);
        sidebar.appendChild(document.createElement("br"));
      }
      // 将侧边栏添加到页面主体
      document.body.appendChild(sidebar);
    }
  }
  createSidebar();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>

<style>
  /* 标题 */
  .sidebar {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
  }

  .post-title:hover {
    outline: 0;
    color: #cc7a00;
    text-shadow: 1px 1px 1px #ffd147;
  }

  .toc_container {
    overflow-y: scroll;
    /* webkit */
    /* firefox */
    scrollbar-width: none;
    /* ie */
    -ms-overflow-style: none;
  }

  .toc_container::-webkit-scrollbar {
    width: 0;
    height: 0;
  }

  .toc_container a {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
  }
</style>
